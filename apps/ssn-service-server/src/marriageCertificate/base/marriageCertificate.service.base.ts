/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MarriageCertificate as PrismaMarriageCertificate,
  Person as PrismaPerson,
  Spouse as PrismaSpouse,
} from "@prisma/client";

export class MarriageCertificateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MarriageCertificateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.marriageCertificate.count(args);
  }

  async marriageCertificates(
    args: Prisma.MarriageCertificateFindManyArgs
  ): Promise<PrismaMarriageCertificate[]> {
    return this.prisma.marriageCertificate.findMany(args);
  }
  async marriageCertificate(
    args: Prisma.MarriageCertificateFindUniqueArgs
  ): Promise<PrismaMarriageCertificate | null> {
    return this.prisma.marriageCertificate.findUnique(args);
  }
  async createMarriageCertificate(
    args: Prisma.MarriageCertificateCreateArgs
  ): Promise<PrismaMarriageCertificate> {
    return this.prisma.marriageCertificate.create(args);
  }
  async updateMarriageCertificate(
    args: Prisma.MarriageCertificateUpdateArgs
  ): Promise<PrismaMarriageCertificate> {
    return this.prisma.marriageCertificate.update(args);
  }
  async deleteMarriageCertificate(
    args: Prisma.MarriageCertificateDeleteArgs
  ): Promise<PrismaMarriageCertificate> {
    return this.prisma.marriageCertificate.delete(args);
  }

  async getPerson(parentId: string): Promise<PrismaPerson | null> {
    return this.prisma.marriageCertificate
      .findUnique({
        where: { id: parentId },
      })
      .person();
  }

  async getSpouse(parentId: string): Promise<PrismaSpouse | null> {
    return this.prisma.marriageCertificate
      .findUnique({
        where: { id: parentId },
      })
      .spouse();
  }
}
