/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Child } from "./Child";
import { ChildCountArgs } from "./ChildCountArgs";
import { ChildFindManyArgs } from "./ChildFindManyArgs";
import { ChildFindUniqueArgs } from "./ChildFindUniqueArgs";
import { CreateChildArgs } from "./CreateChildArgs";
import { UpdateChildArgs } from "./UpdateChildArgs";
import { DeleteChildArgs } from "./DeleteChildArgs";
import { FamilyMemberFindManyArgs } from "../../familyMember/base/FamilyMemberFindManyArgs";
import { FamilyMember } from "../../familyMember/base/FamilyMember";
import { Person } from "../../person/base/Person";
import { Spouse } from "../../spouse/base/Spouse";
import { ChildService } from "../child.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Child)
export class ChildResolverBase {
  constructor(
    protected readonly service: ChildService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Child",
    action: "read",
    possession: "any",
  })
  async _childrenMeta(
    @graphql.Args() args: ChildCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Child])
  @nestAccessControl.UseRoles({
    resource: "Child",
    action: "read",
    possession: "any",
  })
  async children(@graphql.Args() args: ChildFindManyArgs): Promise<Child[]> {
    return this.service.children(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Child, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Child",
    action: "read",
    possession: "own",
  })
  async child(
    @graphql.Args() args: ChildFindUniqueArgs
  ): Promise<Child | null> {
    const result = await this.service.child(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Child)
  @nestAccessControl.UseRoles({
    resource: "Child",
    action: "create",
    possession: "any",
  })
  async createChild(@graphql.Args() args: CreateChildArgs): Promise<Child> {
    return await this.service.createChild({
      ...args,
      data: {
        ...args.data,

        person: args.data.person
          ? {
              connect: args.data.person,
            }
          : undefined,

        spouse: args.data.spouse
          ? {
              connect: args.data.spouse,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Child)
  @nestAccessControl.UseRoles({
    resource: "Child",
    action: "update",
    possession: "any",
  })
  async updateChild(
    @graphql.Args() args: UpdateChildArgs
  ): Promise<Child | null> {
    try {
      return await this.service.updateChild({
        ...args,
        data: {
          ...args.data,

          person: args.data.person
            ? {
                connect: args.data.person,
              }
            : undefined,

          spouse: args.data.spouse
            ? {
                connect: args.data.spouse,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Child)
  @nestAccessControl.UseRoles({
    resource: "Child",
    action: "delete",
    possession: "any",
  })
  async deleteChild(
    @graphql.Args() args: DeleteChildArgs
  ): Promise<Child | null> {
    try {
      return await this.service.deleteChild(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FamilyMember], { name: "familyMembers" })
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  async findFamilyMembers(
    @graphql.Parent() parent: Child,
    @graphql.Args() args: FamilyMemberFindManyArgs
  ): Promise<FamilyMember[]> {
    const results = await this.service.findFamilyMembers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  async getPerson(@graphql.Parent() parent: Child): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Spouse, {
    nullable: true,
    name: "spouse",
  })
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "read",
    possession: "any",
  })
  async getSpouse(@graphql.Parent() parent: Child): Promise<Spouse | null> {
    const result = await this.service.getSpouse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
