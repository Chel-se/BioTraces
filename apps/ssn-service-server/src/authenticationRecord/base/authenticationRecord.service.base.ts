/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AuthenticationRecord as PrismaAuthenticationRecord,
} from "@prisma/client";

export class AuthenticationRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AuthenticationRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.authenticationRecord.count(args);
  }

  async authenticationRecords(
    args: Prisma.AuthenticationRecordFindManyArgs
  ): Promise<PrismaAuthenticationRecord[]> {
    return this.prisma.authenticationRecord.findMany(args);
  }
  async authenticationRecord(
    args: Prisma.AuthenticationRecordFindUniqueArgs
  ): Promise<PrismaAuthenticationRecord | null> {
    return this.prisma.authenticationRecord.findUnique(args);
  }
  async createAuthenticationRecord(
    args: Prisma.AuthenticationRecordCreateArgs
  ): Promise<PrismaAuthenticationRecord> {
    return this.prisma.authenticationRecord.create(args);
  }
  async updateAuthenticationRecord(
    args: Prisma.AuthenticationRecordUpdateArgs
  ): Promise<PrismaAuthenticationRecord> {
    return this.prisma.authenticationRecord.update(args);
  }
  async deleteAuthenticationRecord(
    args: Prisma.AuthenticationRecordDeleteArgs
  ): Promise<PrismaAuthenticationRecord> {
    return this.prisma.authenticationRecord.delete(args);
  }
}
