/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AuthenticationRecordService } from "../authenticationRecord.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AuthenticationRecordCreateInput } from "./AuthenticationRecordCreateInput";
import { AuthenticationRecord } from "./AuthenticationRecord";
import { AuthenticationRecordFindManyArgs } from "./AuthenticationRecordFindManyArgs";
import { AuthenticationRecordWhereUniqueInput } from "./AuthenticationRecordWhereUniqueInput";
import { AuthenticationRecordUpdateInput } from "./AuthenticationRecordUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AuthenticationRecordControllerBase {
  constructor(
    protected readonly service: AuthenticationRecordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AuthenticationRecord })
  @nestAccessControl.UseRoles({
    resource: "AuthenticationRecord",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAuthenticationRecord(
    @common.Body() data: AuthenticationRecordCreateInput
  ): Promise<AuthenticationRecord> {
    return await this.service.createAuthenticationRecord({
      data: data,
      select: {
        createdAt: true,
        id: true,
        status: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AuthenticationRecord] })
  @ApiNestedQuery(AuthenticationRecordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationRecord",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async authenticationRecords(
    @common.Req() request: Request
  ): Promise<AuthenticationRecord[]> {
    const args = plainToClass(AuthenticationRecordFindManyArgs, request.query);
    return this.service.authenticationRecords({
      ...args,
      select: {
        createdAt: true,
        id: true,
        status: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AuthenticationRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AuthenticationRecord",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async authenticationRecord(
    @common.Param() params: AuthenticationRecordWhereUniqueInput
  ): Promise<AuthenticationRecord | null> {
    const result = await this.service.authenticationRecord({
      where: params,
      select: {
        createdAt: true,
        id: true,
        status: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AuthenticationRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AuthenticationRecord",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAuthenticationRecord(
    @common.Param() params: AuthenticationRecordWhereUniqueInput,
    @common.Body() data: AuthenticationRecordUpdateInput
  ): Promise<AuthenticationRecord | null> {
    try {
      return await this.service.updateAuthenticationRecord({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          status: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AuthenticationRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AuthenticationRecord",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAuthenticationRecord(
    @common.Param() params: AuthenticationRecordWhereUniqueInput
  ): Promise<AuthenticationRecord | null> {
    try {
      return await this.service.deleteAuthenticationRecord({
        where: params,
        select: {
          createdAt: true,
          id: true,
          status: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
