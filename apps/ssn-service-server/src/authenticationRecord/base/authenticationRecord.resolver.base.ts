/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AuthenticationRecord } from "./AuthenticationRecord";
import { AuthenticationRecordCountArgs } from "./AuthenticationRecordCountArgs";
import { AuthenticationRecordFindManyArgs } from "./AuthenticationRecordFindManyArgs";
import { AuthenticationRecordFindUniqueArgs } from "./AuthenticationRecordFindUniqueArgs";
import { CreateAuthenticationRecordArgs } from "./CreateAuthenticationRecordArgs";
import { UpdateAuthenticationRecordArgs } from "./UpdateAuthenticationRecordArgs";
import { DeleteAuthenticationRecordArgs } from "./DeleteAuthenticationRecordArgs";
import { AuthenticationRecordService } from "../authenticationRecord.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AuthenticationRecord)
export class AuthenticationRecordResolverBase {
  constructor(
    protected readonly service: AuthenticationRecordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationRecord",
    action: "read",
    possession: "any",
  })
  async _authenticationRecordsMeta(
    @graphql.Args() args: AuthenticationRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AuthenticationRecord])
  @nestAccessControl.UseRoles({
    resource: "AuthenticationRecord",
    action: "read",
    possession: "any",
  })
  async authenticationRecords(
    @graphql.Args() args: AuthenticationRecordFindManyArgs
  ): Promise<AuthenticationRecord[]> {
    return this.service.authenticationRecords(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AuthenticationRecord, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AuthenticationRecord",
    action: "read",
    possession: "own",
  })
  async authenticationRecord(
    @graphql.Args() args: AuthenticationRecordFindUniqueArgs
  ): Promise<AuthenticationRecord | null> {
    const result = await this.service.authenticationRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AuthenticationRecord)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationRecord",
    action: "create",
    possession: "any",
  })
  async createAuthenticationRecord(
    @graphql.Args() args: CreateAuthenticationRecordArgs
  ): Promise<AuthenticationRecord> {
    return await this.service.createAuthenticationRecord({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AuthenticationRecord)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationRecord",
    action: "update",
    possession: "any",
  })
  async updateAuthenticationRecord(
    @graphql.Args() args: UpdateAuthenticationRecordArgs
  ): Promise<AuthenticationRecord | null> {
    try {
      return await this.service.updateAuthenticationRecord({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AuthenticationRecord)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationRecord",
    action: "delete",
    possession: "any",
  })
  async deleteAuthenticationRecord(
    @graphql.Args() args: DeleteAuthenticationRecordArgs
  ): Promise<AuthenticationRecord | null> {
    try {
      return await this.service.deleteAuthenticationRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
