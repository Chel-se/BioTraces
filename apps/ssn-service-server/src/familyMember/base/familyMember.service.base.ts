/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FamilyMember as PrismaFamilyMember,
  Child as PrismaChild,
  Person as PrismaPerson,
} from "@prisma/client";

export class FamilyMemberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FamilyMemberCountArgs, "select">
  ): Promise<number> {
    return this.prisma.familyMember.count(args);
  }

  async familyMembers(
    args: Prisma.FamilyMemberFindManyArgs
  ): Promise<PrismaFamilyMember[]> {
    return this.prisma.familyMember.findMany(args);
  }
  async familyMember(
    args: Prisma.FamilyMemberFindUniqueArgs
  ): Promise<PrismaFamilyMember | null> {
    return this.prisma.familyMember.findUnique(args);
  }
  async createFamilyMember(
    args: Prisma.FamilyMemberCreateArgs
  ): Promise<PrismaFamilyMember> {
    return this.prisma.familyMember.create(args);
  }
  async updateFamilyMember(
    args: Prisma.FamilyMemberUpdateArgs
  ): Promise<PrismaFamilyMember> {
    return this.prisma.familyMember.update(args);
  }
  async deleteFamilyMember(
    args: Prisma.FamilyMemberDeleteArgs
  ): Promise<PrismaFamilyMember> {
    return this.prisma.familyMember.delete(args);
  }

  async getChild(parentId: string): Promise<PrismaChild | null> {
    return this.prisma.familyMember
      .findUnique({
        where: { id: parentId },
      })
      .child();
  }

  async getPerson(parentId: string): Promise<PrismaPerson | null> {
    return this.prisma.familyMember
      .findUnique({
        where: { id: parentId },
      })
      .person();
  }
}
