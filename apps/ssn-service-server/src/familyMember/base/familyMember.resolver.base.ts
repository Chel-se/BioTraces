/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FamilyMember } from "./FamilyMember";
import { FamilyMemberCountArgs } from "./FamilyMemberCountArgs";
import { FamilyMemberFindManyArgs } from "./FamilyMemberFindManyArgs";
import { FamilyMemberFindUniqueArgs } from "./FamilyMemberFindUniqueArgs";
import { CreateFamilyMemberArgs } from "./CreateFamilyMemberArgs";
import { UpdateFamilyMemberArgs } from "./UpdateFamilyMemberArgs";
import { DeleteFamilyMemberArgs } from "./DeleteFamilyMemberArgs";
import { Child } from "../../child/base/Child";
import { Person } from "../../person/base/Person";
import { FamilyMemberService } from "../familyMember.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FamilyMember)
export class FamilyMemberResolverBase {
  constructor(
    protected readonly service: FamilyMemberService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  async _familyMembersMeta(
    @graphql.Args() args: FamilyMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FamilyMember])
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  async familyMembers(
    @graphql.Args() args: FamilyMemberFindManyArgs
  ): Promise<FamilyMember[]> {
    return this.service.familyMembers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FamilyMember, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "own",
  })
  async familyMember(
    @graphql.Args() args: FamilyMemberFindUniqueArgs
  ): Promise<FamilyMember | null> {
    const result = await this.service.familyMember(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FamilyMember)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "create",
    possession: "any",
  })
  async createFamilyMember(
    @graphql.Args() args: CreateFamilyMemberArgs
  ): Promise<FamilyMember> {
    return await this.service.createFamilyMember({
      ...args,
      data: {
        ...args.data,

        child: args.data.child
          ? {
              connect: args.data.child,
            }
          : undefined,

        person: args.data.person
          ? {
              connect: args.data.person,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FamilyMember)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "update",
    possession: "any",
  })
  async updateFamilyMember(
    @graphql.Args() args: UpdateFamilyMemberArgs
  ): Promise<FamilyMember | null> {
    try {
      return await this.service.updateFamilyMember({
        ...args,
        data: {
          ...args.data,

          child: args.data.child
            ? {
                connect: args.data.child,
              }
            : undefined,

          person: args.data.person
            ? {
                connect: args.data.person,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FamilyMember)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "delete",
    possession: "any",
  })
  async deleteFamilyMember(
    @graphql.Args() args: DeleteFamilyMemberArgs
  ): Promise<FamilyMember | null> {
    try {
      return await this.service.deleteFamilyMember(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Child, {
    nullable: true,
    name: "child",
  })
  @nestAccessControl.UseRoles({
    resource: "Child",
    action: "read",
    possession: "any",
  })
  async getChild(
    @graphql.Parent() parent: FamilyMember
  ): Promise<Child | null> {
    const result = await this.service.getChild(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  async getPerson(
    @graphql.Parent() parent: FamilyMember
  ): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
