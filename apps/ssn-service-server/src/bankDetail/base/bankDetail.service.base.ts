/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BankDetail as PrismaBankDetail,
  Person as PrismaPerson,
} from "@prisma/client";

export class BankDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BankDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bankDetail.count(args);
  }

  async bankDetails(
    args: Prisma.BankDetailFindManyArgs
  ): Promise<PrismaBankDetail[]> {
    return this.prisma.bankDetail.findMany(args);
  }
  async bankDetail(
    args: Prisma.BankDetailFindUniqueArgs
  ): Promise<PrismaBankDetail | null> {
    return this.prisma.bankDetail.findUnique(args);
  }
  async createBankDetail(
    args: Prisma.BankDetailCreateArgs
  ): Promise<PrismaBankDetail> {
    return this.prisma.bankDetail.create(args);
  }
  async updateBankDetail(
    args: Prisma.BankDetailUpdateArgs
  ): Promise<PrismaBankDetail> {
    return this.prisma.bankDetail.update(args);
  }
  async deleteBankDetail(
    args: Prisma.BankDetailDeleteArgs
  ): Promise<PrismaBankDetail> {
    return this.prisma.bankDetail.delete(args);
  }

  async getPerson(parentId: string): Promise<PrismaPerson | null> {
    return this.prisma.bankDetail
      .findUnique({
        where: { id: parentId },
      })
      .person();
  }
}
