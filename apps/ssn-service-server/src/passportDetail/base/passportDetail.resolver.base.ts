/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PassportDetail } from "./PassportDetail";
import { PassportDetailCountArgs } from "./PassportDetailCountArgs";
import { PassportDetailFindManyArgs } from "./PassportDetailFindManyArgs";
import { PassportDetailFindUniqueArgs } from "./PassportDetailFindUniqueArgs";
import { CreatePassportDetailArgs } from "./CreatePassportDetailArgs";
import { UpdatePassportDetailArgs } from "./UpdatePassportDetailArgs";
import { DeletePassportDetailArgs } from "./DeletePassportDetailArgs";
import { TravelDetailFindManyArgs } from "../../travelDetail/base/TravelDetailFindManyArgs";
import { TravelDetail } from "../../travelDetail/base/TravelDetail";
import { Person } from "../../person/base/Person";
import { PassportDetailService } from "../passportDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PassportDetail)
export class PassportDetailResolverBase {
  constructor(
    protected readonly service: PassportDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "read",
    possession: "any",
  })
  async _passportDetailsMeta(
    @graphql.Args() args: PassportDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PassportDetail])
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "read",
    possession: "any",
  })
  async passportDetails(
    @graphql.Args() args: PassportDetailFindManyArgs
  ): Promise<PassportDetail[]> {
    return this.service.passportDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PassportDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "read",
    possession: "own",
  })
  async passportDetail(
    @graphql.Args() args: PassportDetailFindUniqueArgs
  ): Promise<PassportDetail | null> {
    const result = await this.service.passportDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PassportDetail)
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "create",
    possession: "any",
  })
  async createPassportDetail(
    @graphql.Args() args: CreatePassportDetailArgs
  ): Promise<PassportDetail> {
    return await this.service.createPassportDetail({
      ...args,
      data: {
        ...args.data,

        person: args.data.person
          ? {
              connect: args.data.person,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PassportDetail)
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "update",
    possession: "any",
  })
  async updatePassportDetail(
    @graphql.Args() args: UpdatePassportDetailArgs
  ): Promise<PassportDetail | null> {
    try {
      return await this.service.updatePassportDetail({
        ...args,
        data: {
          ...args.data,

          person: args.data.person
            ? {
                connect: args.data.person,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PassportDetail)
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "delete",
    possession: "any",
  })
  async deletePassportDetail(
    @graphql.Args() args: DeletePassportDetailArgs
  ): Promise<PassportDetail | null> {
    try {
      return await this.service.deletePassportDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TravelDetail], { name: "travelDetails" })
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "read",
    possession: "any",
  })
  async findTravelDetails(
    @graphql.Parent() parent: PassportDetail,
    @graphql.Args() args: TravelDetailFindManyArgs
  ): Promise<TravelDetail[]> {
    const results = await this.service.findTravelDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  async getPerson(
    @graphql.Parent() parent: PassportDetail
  ): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
