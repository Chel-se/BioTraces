/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PassportDetailService } from "../passportDetail.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PassportDetailCreateInput } from "./PassportDetailCreateInput";
import { PassportDetail } from "./PassportDetail";
import { PassportDetailFindManyArgs } from "./PassportDetailFindManyArgs";
import { PassportDetailWhereUniqueInput } from "./PassportDetailWhereUniqueInput";
import { PassportDetailUpdateInput } from "./PassportDetailUpdateInput";
import { TravelDetailFindManyArgs } from "../../travelDetail/base/TravelDetailFindManyArgs";
import { TravelDetail } from "../../travelDetail/base/TravelDetail";
import { TravelDetailWhereUniqueInput } from "../../travelDetail/base/TravelDetailWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PassportDetailControllerBase {
  constructor(
    protected readonly service: PassportDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PassportDetail })
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPassportDetail(
    @common.Body() data: PassportDetailCreateInput
  ): Promise<PassportDetail> {
    return await this.service.createPassportDetail({
      data: {
        ...data,

        person: data.person
          ? {
              connect: data.person,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PassportDetail] })
  @ApiNestedQuery(PassportDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async passportDetails(
    @common.Req() request: Request
  ): Promise<PassportDetail[]> {
    const args = plainToClass(PassportDetailFindManyArgs, request.query);
    return this.service.passportDetails({
      ...args,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PassportDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async passportDetail(
    @common.Param() params: PassportDetailWhereUniqueInput
  ): Promise<PassportDetail | null> {
    const result = await this.service.passportDetail({
      where: params,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PassportDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePassportDetail(
    @common.Param() params: PassportDetailWhereUniqueInput,
    @common.Body() data: PassportDetailUpdateInput
  ): Promise<PassportDetail | null> {
    try {
      return await this.service.updatePassportDetail({
        where: params,
        data: {
          ...data,

          person: data.person
            ? {
                connect: data.person,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          person: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PassportDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePassportDetail(
    @common.Param() params: PassportDetailWhereUniqueInput
  ): Promise<PassportDetail | null> {
    try {
      return await this.service.deletePassportDetail({
        where: params,
        select: {
          createdAt: true,
          id: true,

          person: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/travelDetails")
  @ApiNestedQuery(TravelDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "read",
    possession: "any",
  })
  async findTravelDetails(
    @common.Req() request: Request,
    @common.Param() params: PassportDetailWhereUniqueInput
  ): Promise<TravelDetail[]> {
    const query = plainToClass(TravelDetailFindManyArgs, request.query);
    const results = await this.service.findTravelDetails(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        passportDetail: {
          select: {
            id: true,
          },
        },

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/travelDetails")
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "update",
    possession: "any",
  })
  async connectTravelDetails(
    @common.Param() params: PassportDetailWhereUniqueInput,
    @common.Body() body: TravelDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelDetails: {
        connect: body,
      },
    };
    await this.service.updatePassportDetail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/travelDetails")
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "update",
    possession: "any",
  })
  async updateTravelDetails(
    @common.Param() params: PassportDetailWhereUniqueInput,
    @common.Body() body: TravelDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelDetails: {
        set: body,
      },
    };
    await this.service.updatePassportDetail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/travelDetails")
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "update",
    possession: "any",
  })
  async disconnectTravelDetails(
    @common.Param() params: PassportDetailWhereUniqueInput,
    @common.Body() body: TravelDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelDetails: {
        disconnect: body,
      },
    };
    await this.service.updatePassportDetail({
      where: params,
      data,
      select: { id: true },
    });
  }
}
