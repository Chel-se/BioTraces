/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PassportDetail as PrismaPassportDetail,
  TravelDetail as PrismaTravelDetail,
  Person as PrismaPerson,
} from "@prisma/client";

export class PassportDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PassportDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.passportDetail.count(args);
  }

  async passportDetails(
    args: Prisma.PassportDetailFindManyArgs
  ): Promise<PrismaPassportDetail[]> {
    return this.prisma.passportDetail.findMany(args);
  }
  async passportDetail(
    args: Prisma.PassportDetailFindUniqueArgs
  ): Promise<PrismaPassportDetail | null> {
    return this.prisma.passportDetail.findUnique(args);
  }
  async createPassportDetail(
    args: Prisma.PassportDetailCreateArgs
  ): Promise<PrismaPassportDetail> {
    return this.prisma.passportDetail.create(args);
  }
  async updatePassportDetail(
    args: Prisma.PassportDetailUpdateArgs
  ): Promise<PrismaPassportDetail> {
    return this.prisma.passportDetail.update(args);
  }
  async deletePassportDetail(
    args: Prisma.PassportDetailDeleteArgs
  ): Promise<PrismaPassportDetail> {
    return this.prisma.passportDetail.delete(args);
  }

  async findTravelDetails(
    parentId: string,
    args: Prisma.TravelDetailFindManyArgs
  ): Promise<PrismaTravelDetail[]> {
    return this.prisma.passportDetail
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .travelDetails(args);
  }

  async getPerson(parentId: string): Promise<PrismaPerson | null> {
    return this.prisma.passportDetail
      .findUnique({
        where: { id: parentId },
      })
      .person();
  }
}
