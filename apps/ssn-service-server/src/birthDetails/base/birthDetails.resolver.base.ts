/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BirthDetails } from "./BirthDetails";
import { BirthDetailsCountArgs } from "./BirthDetailsCountArgs";
import { BirthDetailsFindManyArgs } from "./BirthDetailsFindManyArgs";
import { BirthDetailsFindUniqueArgs } from "./BirthDetailsFindUniqueArgs";
import { CreateBirthDetailsArgs } from "./CreateBirthDetailsArgs";
import { UpdateBirthDetailsArgs } from "./UpdateBirthDetailsArgs";
import { DeleteBirthDetailsArgs } from "./DeleteBirthDetailsArgs";
import { EducationRecordFindManyArgs } from "../../educationRecord/base/EducationRecordFindManyArgs";
import { EducationRecord } from "../../educationRecord/base/EducationRecord";
import { HealthRecord } from "../../healthRecord/base/HealthRecord";
import { Person } from "../../person/base/Person";
import { BirthDetailsService } from "../birthDetails.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BirthDetails)
export class BirthDetailsResolverBase {
  constructor(
    protected readonly service: BirthDetailsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BirthDetails",
    action: "read",
    possession: "any",
  })
  async _birthDetailsItemsMeta(
    @graphql.Args() args: BirthDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BirthDetails])
  @nestAccessControl.UseRoles({
    resource: "BirthDetails",
    action: "read",
    possession: "any",
  })
  async birthDetailsItems(
    @graphql.Args() args: BirthDetailsFindManyArgs
  ): Promise<BirthDetails[]> {
    return this.service.birthDetailsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BirthDetails, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BirthDetails",
    action: "read",
    possession: "own",
  })
  async birthDetails(
    @graphql.Args() args: BirthDetailsFindUniqueArgs
  ): Promise<BirthDetails | null> {
    const result = await this.service.birthDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BirthDetails)
  @nestAccessControl.UseRoles({
    resource: "BirthDetails",
    action: "create",
    possession: "any",
  })
  async createBirthDetails(
    @graphql.Args() args: CreateBirthDetailsArgs
  ): Promise<BirthDetails> {
    return await this.service.createBirthDetails({
      ...args,
      data: {
        ...args.data,

        healthRecord: args.data.healthRecord
          ? {
              connect: args.data.healthRecord,
            }
          : undefined,

        person: args.data.person
          ? {
              connect: args.data.person,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BirthDetails)
  @nestAccessControl.UseRoles({
    resource: "BirthDetails",
    action: "update",
    possession: "any",
  })
  async updateBirthDetails(
    @graphql.Args() args: UpdateBirthDetailsArgs
  ): Promise<BirthDetails | null> {
    try {
      return await this.service.updateBirthDetails({
        ...args,
        data: {
          ...args.data,

          healthRecord: args.data.healthRecord
            ? {
                connect: args.data.healthRecord,
              }
            : undefined,

          person: args.data.person
            ? {
                connect: args.data.person,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BirthDetails)
  @nestAccessControl.UseRoles({
    resource: "BirthDetails",
    action: "delete",
    possession: "any",
  })
  async deleteBirthDetails(
    @graphql.Args() args: DeleteBirthDetailsArgs
  ): Promise<BirthDetails | null> {
    try {
      return await this.service.deleteBirthDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EducationRecord], { name: "educationRecords" })
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "read",
    possession: "any",
  })
  async findEducationRecords(
    @graphql.Parent() parent: BirthDetails,
    @graphql.Args() args: EducationRecordFindManyArgs
  ): Promise<EducationRecord[]> {
    const results = await this.service.findEducationRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => HealthRecord, {
    nullable: true,
    name: "healthRecord",
  })
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "read",
    possession: "any",
  })
  async getHealthRecord(
    @graphql.Parent() parent: BirthDetails
  ): Promise<HealthRecord | null> {
    const result = await this.service.getHealthRecord(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  async getPerson(
    @graphql.Parent() parent: BirthDetails
  ): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
