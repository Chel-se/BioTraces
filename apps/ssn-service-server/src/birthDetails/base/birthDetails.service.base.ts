/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BirthDetails as PrismaBirthDetails,
  EducationRecord as PrismaEducationRecord,
  HealthRecord as PrismaHealthRecord,
  Person as PrismaPerson,
} from "@prisma/client";

export class BirthDetailsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BirthDetailsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.birthDetails.count(args);
  }

  async birthDetailsItems(
    args: Prisma.BirthDetailsFindManyArgs
  ): Promise<PrismaBirthDetails[]> {
    return this.prisma.birthDetails.findMany(args);
  }
  async birthDetails(
    args: Prisma.BirthDetailsFindUniqueArgs
  ): Promise<PrismaBirthDetails | null> {
    return this.prisma.birthDetails.findUnique(args);
  }
  async createBirthDetails(
    args: Prisma.BirthDetailsCreateArgs
  ): Promise<PrismaBirthDetails> {
    return this.prisma.birthDetails.create(args);
  }
  async updateBirthDetails(
    args: Prisma.BirthDetailsUpdateArgs
  ): Promise<PrismaBirthDetails> {
    return this.prisma.birthDetails.update(args);
  }
  async deleteBirthDetails(
    args: Prisma.BirthDetailsDeleteArgs
  ): Promise<PrismaBirthDetails> {
    return this.prisma.birthDetails.delete(args);
  }

  async findEducationRecords(
    parentId: string,
    args: Prisma.EducationRecordFindManyArgs
  ): Promise<PrismaEducationRecord[]> {
    return this.prisma.birthDetails
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .educationRecords(args);
  }

  async getHealthRecord(parentId: string): Promise<PrismaHealthRecord | null> {
    return this.prisma.birthDetails
      .findUnique({
        where: { id: parentId },
      })
      .healthRecord();
  }

  async getPerson(parentId: string): Promise<PrismaPerson | null> {
    return this.prisma.birthDetails
      .findUnique({
        where: { id: parentId },
      })
      .person();
  }
}
