/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SpouseService } from "../spouse.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SpouseCreateInput } from "./SpouseCreateInput";
import { Spouse } from "./Spouse";
import { SpouseFindManyArgs } from "./SpouseFindManyArgs";
import { SpouseWhereUniqueInput } from "./SpouseWhereUniqueInput";
import { SpouseUpdateInput } from "./SpouseUpdateInput";
import { ChildFindManyArgs } from "../../child/base/ChildFindManyArgs";
import { Child } from "../../child/base/Child";
import { ChildWhereUniqueInput } from "../../child/base/ChildWhereUniqueInput";
import { MarriageCertificateFindManyArgs } from "../../marriageCertificate/base/MarriageCertificateFindManyArgs";
import { MarriageCertificate } from "../../marriageCertificate/base/MarriageCertificate";
import { MarriageCertificateWhereUniqueInput } from "../../marriageCertificate/base/MarriageCertificateWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SpouseControllerBase {
  constructor(
    protected readonly service: SpouseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Spouse })
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSpouse(@common.Body() data: SpouseCreateInput): Promise<Spouse> {
    return await this.service.createSpouse({
      data: {
        ...data,

        person: data.person
          ? {
              connect: data.person,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Spouse] })
  @ApiNestedQuery(SpouseFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async spouses(@common.Req() request: Request): Promise<Spouse[]> {
    const args = plainToClass(SpouseFindManyArgs, request.query);
    return this.service.spouses({
      ...args,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Spouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async spouse(
    @common.Param() params: SpouseWhereUniqueInput
  ): Promise<Spouse | null> {
    const result = await this.service.spouse({
      where: params,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Spouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSpouse(
    @common.Param() params: SpouseWhereUniqueInput,
    @common.Body() data: SpouseUpdateInput
  ): Promise<Spouse | null> {
    try {
      return await this.service.updateSpouse({
        where: params,
        data: {
          ...data,

          person: data.person
            ? {
                connect: data.person,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          person: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Spouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSpouse(
    @common.Param() params: SpouseWhereUniqueInput
  ): Promise<Spouse | null> {
    try {
      return await this.service.deleteSpouse({
        where: params,
        select: {
          createdAt: true,
          id: true,

          person: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/children")
  @ApiNestedQuery(ChildFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Child",
    action: "read",
    possession: "any",
  })
  async findChildren(
    @common.Req() request: Request,
    @common.Param() params: SpouseWhereUniqueInput
  ): Promise<Child[]> {
    const query = plainToClass(ChildFindManyArgs, request.query);
    const results = await this.service.findChildren(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        parentSpouse: true,

        person: {
          select: {
            id: true,
          },
        },

        spouse: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/children")
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "update",
    possession: "any",
  })
  async connectChildren(
    @common.Param() params: SpouseWhereUniqueInput,
    @common.Body() body: ChildWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      children: {
        connect: body,
      },
    };
    await this.service.updateSpouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/children")
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "update",
    possession: "any",
  })
  async updateChildren(
    @common.Param() params: SpouseWhereUniqueInput,
    @common.Body() body: ChildWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      children: {
        set: body,
      },
    };
    await this.service.updateSpouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/children")
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "update",
    possession: "any",
  })
  async disconnectChildren(
    @common.Param() params: SpouseWhereUniqueInput,
    @common.Body() body: ChildWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      children: {
        disconnect: body,
      },
    };
    await this.service.updateSpouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/marriageCertificates")
  @ApiNestedQuery(MarriageCertificateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MarriageCertificate",
    action: "read",
    possession: "any",
  })
  async findMarriageCertificates(
    @common.Req() request: Request,
    @common.Param() params: SpouseWhereUniqueInput
  ): Promise<MarriageCertificate[]> {
    const query = plainToClass(MarriageCertificateFindManyArgs, request.query);
    const results = await this.service.findMarriageCertificates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        spouse: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/marriageCertificates")
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "update",
    possession: "any",
  })
  async connectMarriageCertificates(
    @common.Param() params: SpouseWhereUniqueInput,
    @common.Body() body: MarriageCertificateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      marriageCertificates: {
        connect: body,
      },
    };
    await this.service.updateSpouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/marriageCertificates")
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "update",
    possession: "any",
  })
  async updateMarriageCertificates(
    @common.Param() params: SpouseWhereUniqueInput,
    @common.Body() body: MarriageCertificateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      marriageCertificates: {
        set: body,
      },
    };
    await this.service.updateSpouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/marriageCertificates")
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "update",
    possession: "any",
  })
  async disconnectMarriageCertificates(
    @common.Param() params: SpouseWhereUniqueInput,
    @common.Body() body: MarriageCertificateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      marriageCertificates: {
        disconnect: body,
      },
    };
    await this.service.updateSpouse({
      where: params,
      data,
      select: { id: true },
    });
  }
}
