/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Spouse as PrismaSpouse,
  Child as PrismaChild,
  MarriageCertificate as PrismaMarriageCertificate,
  Person as PrismaPerson,
} from "@prisma/client";

export class SpouseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SpouseCountArgs, "select">): Promise<number> {
    return this.prisma.spouse.count(args);
  }

  async spouses(args: Prisma.SpouseFindManyArgs): Promise<PrismaSpouse[]> {
    return this.prisma.spouse.findMany(args);
  }
  async spouse(
    args: Prisma.SpouseFindUniqueArgs
  ): Promise<PrismaSpouse | null> {
    return this.prisma.spouse.findUnique(args);
  }
  async createSpouse(args: Prisma.SpouseCreateArgs): Promise<PrismaSpouse> {
    return this.prisma.spouse.create(args);
  }
  async updateSpouse(args: Prisma.SpouseUpdateArgs): Promise<PrismaSpouse> {
    return this.prisma.spouse.update(args);
  }
  async deleteSpouse(args: Prisma.SpouseDeleteArgs): Promise<PrismaSpouse> {
    return this.prisma.spouse.delete(args);
  }

  async findChildren(
    parentId: string,
    args: Prisma.ChildFindManyArgs
  ): Promise<PrismaChild[]> {
    return this.prisma.spouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .children(args);
  }

  async findMarriageCertificates(
    parentId: string,
    args: Prisma.MarriageCertificateFindManyArgs
  ): Promise<PrismaMarriageCertificate[]> {
    return this.prisma.spouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .marriageCertificates(args);
  }

  async getPerson(parentId: string): Promise<PrismaPerson | null> {
    return this.prisma.spouse
      .findUnique({
        where: { id: parentId },
      })
      .person();
  }
}
