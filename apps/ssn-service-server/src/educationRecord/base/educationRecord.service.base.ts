/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EducationRecord as PrismaEducationRecord,
  BirthDetails as PrismaBirthDetails,
  Person as PrismaPerson,
} from "@prisma/client";

export class EducationRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EducationRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.educationRecord.count(args);
  }

  async educationRecords(
    args: Prisma.EducationRecordFindManyArgs
  ): Promise<PrismaEducationRecord[]> {
    return this.prisma.educationRecord.findMany(args);
  }
  async educationRecord(
    args: Prisma.EducationRecordFindUniqueArgs
  ): Promise<PrismaEducationRecord | null> {
    return this.prisma.educationRecord.findUnique(args);
  }
  async createEducationRecord(
    args: Prisma.EducationRecordCreateArgs
  ): Promise<PrismaEducationRecord> {
    return this.prisma.educationRecord.create(args);
  }
  async updateEducationRecord(
    args: Prisma.EducationRecordUpdateArgs
  ): Promise<PrismaEducationRecord> {
    return this.prisma.educationRecord.update(args);
  }
  async deleteEducationRecord(
    args: Prisma.EducationRecordDeleteArgs
  ): Promise<PrismaEducationRecord> {
    return this.prisma.educationRecord.delete(args);
  }

  async getBirthDetail(parentId: string): Promise<PrismaBirthDetails | null> {
    return this.prisma.educationRecord
      .findUnique({
        where: { id: parentId },
      })
      .birthDetail();
  }

  async getPerson(parentId: string): Promise<PrismaPerson | null> {
    return this.prisma.educationRecord
      .findUnique({
        where: { id: parentId },
      })
      .person();
  }
}
