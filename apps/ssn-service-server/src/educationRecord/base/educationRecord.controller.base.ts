/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EducationRecordService } from "../educationRecord.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EducationRecordCreateInput } from "./EducationRecordCreateInput";
import { EducationRecord } from "./EducationRecord";
import { EducationRecordFindManyArgs } from "./EducationRecordFindManyArgs";
import { EducationRecordWhereUniqueInput } from "./EducationRecordWhereUniqueInput";
import { EducationRecordUpdateInput } from "./EducationRecordUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EducationRecordControllerBase {
  constructor(
    protected readonly service: EducationRecordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EducationRecord })
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEducationRecord(
    @common.Body() data: EducationRecordCreateInput
  ): Promise<EducationRecord> {
    return await this.service.createEducationRecord({
      data: {
        ...data,

        birthDetail: data.birthDetail
          ? {
              connect: data.birthDetail,
            }
          : undefined,

        person: data.person
          ? {
              connect: data.person,
            }
          : undefined,
      },
      select: {
        birthDetail: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [EducationRecord] })
  @ApiNestedQuery(EducationRecordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async educationRecords(
    @common.Req() request: Request
  ): Promise<EducationRecord[]> {
    const args = plainToClass(EducationRecordFindManyArgs, request.query);
    return this.service.educationRecords({
      ...args,
      select: {
        birthDetail: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EducationRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async educationRecord(
    @common.Param() params: EducationRecordWhereUniqueInput
  ): Promise<EducationRecord | null> {
    const result = await this.service.educationRecord({
      where: params,
      select: {
        birthDetail: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EducationRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEducationRecord(
    @common.Param() params: EducationRecordWhereUniqueInput,
    @common.Body() data: EducationRecordUpdateInput
  ): Promise<EducationRecord | null> {
    try {
      return await this.service.updateEducationRecord({
        where: params,
        data: {
          ...data,

          birthDetail: data.birthDetail
            ? {
                connect: data.birthDetail,
              }
            : undefined,

          person: data.person
            ? {
                connect: data.person,
              }
            : undefined,
        },
        select: {
          birthDetail: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          person: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EducationRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEducationRecord(
    @common.Param() params: EducationRecordWhereUniqueInput
  ): Promise<EducationRecord | null> {
    try {
      return await this.service.deleteEducationRecord({
        where: params,
        select: {
          birthDetail: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          person: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
