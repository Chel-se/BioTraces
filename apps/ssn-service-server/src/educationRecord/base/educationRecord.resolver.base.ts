/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EducationRecord } from "./EducationRecord";
import { EducationRecordCountArgs } from "./EducationRecordCountArgs";
import { EducationRecordFindManyArgs } from "./EducationRecordFindManyArgs";
import { EducationRecordFindUniqueArgs } from "./EducationRecordFindUniqueArgs";
import { CreateEducationRecordArgs } from "./CreateEducationRecordArgs";
import { UpdateEducationRecordArgs } from "./UpdateEducationRecordArgs";
import { DeleteEducationRecordArgs } from "./DeleteEducationRecordArgs";
import { BirthDetails } from "../../birthDetails/base/BirthDetails";
import { Person } from "../../person/base/Person";
import { EducationRecordService } from "../educationRecord.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EducationRecord)
export class EducationRecordResolverBase {
  constructor(
    protected readonly service: EducationRecordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "read",
    possession: "any",
  })
  async _educationRecordsMeta(
    @graphql.Args() args: EducationRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EducationRecord])
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "read",
    possession: "any",
  })
  async educationRecords(
    @graphql.Args() args: EducationRecordFindManyArgs
  ): Promise<EducationRecord[]> {
    return this.service.educationRecords(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EducationRecord, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "read",
    possession: "own",
  })
  async educationRecord(
    @graphql.Args() args: EducationRecordFindUniqueArgs
  ): Promise<EducationRecord | null> {
    const result = await this.service.educationRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EducationRecord)
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "create",
    possession: "any",
  })
  async createEducationRecord(
    @graphql.Args() args: CreateEducationRecordArgs
  ): Promise<EducationRecord> {
    return await this.service.createEducationRecord({
      ...args,
      data: {
        ...args.data,

        birthDetail: args.data.birthDetail
          ? {
              connect: args.data.birthDetail,
            }
          : undefined,

        person: args.data.person
          ? {
              connect: args.data.person,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EducationRecord)
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "update",
    possession: "any",
  })
  async updateEducationRecord(
    @graphql.Args() args: UpdateEducationRecordArgs
  ): Promise<EducationRecord | null> {
    try {
      return await this.service.updateEducationRecord({
        ...args,
        data: {
          ...args.data,

          birthDetail: args.data.birthDetail
            ? {
                connect: args.data.birthDetail,
              }
            : undefined,

          person: args.data.person
            ? {
                connect: args.data.person,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EducationRecord)
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "delete",
    possession: "any",
  })
  async deleteEducationRecord(
    @graphql.Args() args: DeleteEducationRecordArgs
  ): Promise<EducationRecord | null> {
    try {
      return await this.service.deleteEducationRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BirthDetails, {
    nullable: true,
    name: "birthDetail",
  })
  @nestAccessControl.UseRoles({
    resource: "BirthDetails",
    action: "read",
    possession: "any",
  })
  async getBirthDetail(
    @graphql.Parent() parent: EducationRecord
  ): Promise<BirthDetails | null> {
    const result = await this.service.getBirthDetail(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  async getPerson(
    @graphql.Parent() parent: EducationRecord
  ): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
