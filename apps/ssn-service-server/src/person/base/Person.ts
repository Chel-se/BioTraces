/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BankDetail } from "../../bankDetail/base/BankDetail";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  MaxLength,
} from "class-validator";
import { Type } from "class-transformer";
import { BirthDetails } from "../../birthDetails/base/BirthDetails";
import { Child } from "../../child/base/Child";
import { EducationRecord } from "../../educationRecord/base/EducationRecord";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { FamilyMember } from "../../familyMember/base/FamilyMember";
import { HealthRecord } from "../../healthRecord/base/HealthRecord";
import { MarriageCertificate } from "../../marriageCertificate/base/MarriageCertificate";
import { Otp } from "../../otp/base/Otp";
import { PassportDetail } from "../../passportDetail/base/PassportDetail";
import { Spouse } from "../../spouse/base/Spouse";
import { TravelDetail } from "../../travelDetail/base/TravelDetail";

@ObjectType()
class Person {
  @ApiProperty({
    required: false,
    type: () => [BankDetail],
  })
  @ValidateNested()
  @Type(() => BankDetail)
  @IsOptional()
  bankDetails?: Array<BankDetail>;

  @ApiProperty({
    required: false,
    type: () => [BirthDetails],
  })
  @ValidateNested()
  @Type(() => BirthDetails)
  @IsOptional()
  birthDetailsItems?: Array<BirthDetails>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  birthdate!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [Child],
  })
  @ValidateNested()
  @Type(() => Child)
  @IsOptional()
  children?: Array<Child>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfBirth!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [EducationRecord],
  })
  @ValidateNested()
  @Type(() => EducationRecord)
  @IsOptional()
  educationRecords?: Array<EducationRecord>;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  faceScan!: JsonValue;

  @ApiProperty({
    required: false,
    type: () => [FamilyMember],
  })
  @ValidateNested()
  @Type(() => FamilyMember)
  @IsOptional()
  familyMembers?: Array<FamilyMember>;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  familyTree!: JsonValue;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  fingerPrintScan!: JsonValue;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName!: string | null;

  @ApiProperty({
    required: false,
    type: () => [HealthRecord],
  })
  @ValidateNested()
  @Type(() => HealthRecord)
  @IsOptional()
  healthRecords?: Array<HealthRecord>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName!: string | null;

  @ApiProperty({
    required: false,
    type: () => [MarriageCertificate],
  })
  @ValidateNested()
  @Type(() => MarriageCertificate)
  @IsOptional()
  marriageCertificates?: Array<MarriageCertificate>;

  @ApiProperty({
    required: false,
    type: () => [Otp],
  })
  @ValidateNested()
  @Type(() => Otp)
  @IsOptional()
  otps?: Array<Otp>;

  @ApiProperty({
    required: false,
    type: () => [PassportDetail],
  })
  @ValidateNested()
  @Type(() => PassportDetail)
  @IsOptional()
  passportDetails?: Array<PassportDetail>;

  @ApiProperty({
    required: false,
    type: () => [Spouse],
  })
  @ValidateNested()
  @Type(() => Spouse)
  @IsOptional()
  spouses?: Array<Spouse>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ssnNumber!: string | null;

  @ApiProperty({
    required: false,
    type: () => [TravelDetail],
  })
  @ValidateNested()
  @Type(() => TravelDetail)
  @IsOptional()
  travelDetails?: Array<TravelDetail>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Person as Person };
