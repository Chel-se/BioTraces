/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BankDetailCreateNestedManyWithoutPeopleInput } from "./BankDetailCreateNestedManyWithoutPeopleInput";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  MaxLength,
} from "class-validator";
import { Type } from "class-transformer";
import { BirthDetailsCreateNestedManyWithoutPeopleInput } from "./BirthDetailsCreateNestedManyWithoutPeopleInput";
import { ChildCreateNestedManyWithoutPeopleInput } from "./ChildCreateNestedManyWithoutPeopleInput";
import { EducationRecordCreateNestedManyWithoutPeopleInput } from "./EducationRecordCreateNestedManyWithoutPeopleInput";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { FamilyMemberCreateNestedManyWithoutPeopleInput } from "./FamilyMemberCreateNestedManyWithoutPeopleInput";
import { HealthRecordCreateNestedManyWithoutPeopleInput } from "./HealthRecordCreateNestedManyWithoutPeopleInput";
import { MarriageCertificateCreateNestedManyWithoutPeopleInput } from "./MarriageCertificateCreateNestedManyWithoutPeopleInput";
import { OtpCreateNestedManyWithoutPeopleInput } from "./OtpCreateNestedManyWithoutPeopleInput";
import { PassportDetailCreateNestedManyWithoutPeopleInput } from "./PassportDetailCreateNestedManyWithoutPeopleInput";
import { SpouseCreateNestedManyWithoutPeopleInput } from "./SpouseCreateNestedManyWithoutPeopleInput";
import { TravelDetailCreateNestedManyWithoutPeopleInput } from "./TravelDetailCreateNestedManyWithoutPeopleInput";

@InputType()
class PersonCreateInput {
  @ApiProperty({
    required: false,
    type: () => BankDetailCreateNestedManyWithoutPeopleInput,
  })
  @ValidateNested()
  @Type(() => BankDetailCreateNestedManyWithoutPeopleInput)
  @IsOptional()
  @Field(() => BankDetailCreateNestedManyWithoutPeopleInput, {
    nullable: true,
  })
  bankDetails?: BankDetailCreateNestedManyWithoutPeopleInput;

  @ApiProperty({
    required: false,
    type: () => BirthDetailsCreateNestedManyWithoutPeopleInput,
  })
  @ValidateNested()
  @Type(() => BirthDetailsCreateNestedManyWithoutPeopleInput)
  @IsOptional()
  @Field(() => BirthDetailsCreateNestedManyWithoutPeopleInput, {
    nullable: true,
  })
  birthDetailsItems?: BirthDetailsCreateNestedManyWithoutPeopleInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  birthdate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => ChildCreateNestedManyWithoutPeopleInput,
  })
  @ValidateNested()
  @Type(() => ChildCreateNestedManyWithoutPeopleInput)
  @IsOptional()
  @Field(() => ChildCreateNestedManyWithoutPeopleInput, {
    nullable: true,
  })
  children?: ChildCreateNestedManyWithoutPeopleInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfBirth?: Date | null;

  @ApiProperty({
    required: false,
    type: () => EducationRecordCreateNestedManyWithoutPeopleInput,
  })
  @ValidateNested()
  @Type(() => EducationRecordCreateNestedManyWithoutPeopleInput)
  @IsOptional()
  @Field(() => EducationRecordCreateNestedManyWithoutPeopleInput, {
    nullable: true,
  })
  educationRecords?: EducationRecordCreateNestedManyWithoutPeopleInput;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  faceScan?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: () => FamilyMemberCreateNestedManyWithoutPeopleInput,
  })
  @ValidateNested()
  @Type(() => FamilyMemberCreateNestedManyWithoutPeopleInput)
  @IsOptional()
  @Field(() => FamilyMemberCreateNestedManyWithoutPeopleInput, {
    nullable: true,
  })
  familyMembers?: FamilyMemberCreateNestedManyWithoutPeopleInput;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  familyTree?: InputJsonValue;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  fingerPrintScan?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: () => HealthRecordCreateNestedManyWithoutPeopleInput,
  })
  @ValidateNested()
  @Type(() => HealthRecordCreateNestedManyWithoutPeopleInput)
  @IsOptional()
  @Field(() => HealthRecordCreateNestedManyWithoutPeopleInput, {
    nullable: true,
  })
  healthRecords?: HealthRecordCreateNestedManyWithoutPeopleInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => MarriageCertificateCreateNestedManyWithoutPeopleInput,
  })
  @ValidateNested()
  @Type(() => MarriageCertificateCreateNestedManyWithoutPeopleInput)
  @IsOptional()
  @Field(() => MarriageCertificateCreateNestedManyWithoutPeopleInput, {
    nullable: true,
  })
  marriageCertificates?: MarriageCertificateCreateNestedManyWithoutPeopleInput;

  @ApiProperty({
    required: false,
    type: () => OtpCreateNestedManyWithoutPeopleInput,
  })
  @ValidateNested()
  @Type(() => OtpCreateNestedManyWithoutPeopleInput)
  @IsOptional()
  @Field(() => OtpCreateNestedManyWithoutPeopleInput, {
    nullable: true,
  })
  otps?: OtpCreateNestedManyWithoutPeopleInput;

  @ApiProperty({
    required: false,
    type: () => PassportDetailCreateNestedManyWithoutPeopleInput,
  })
  @ValidateNested()
  @Type(() => PassportDetailCreateNestedManyWithoutPeopleInput)
  @IsOptional()
  @Field(() => PassportDetailCreateNestedManyWithoutPeopleInput, {
    nullable: true,
  })
  passportDetails?: PassportDetailCreateNestedManyWithoutPeopleInput;

  @ApiProperty({
    required: false,
    type: () => SpouseCreateNestedManyWithoutPeopleInput,
  })
  @ValidateNested()
  @Type(() => SpouseCreateNestedManyWithoutPeopleInput)
  @IsOptional()
  @Field(() => SpouseCreateNestedManyWithoutPeopleInput, {
    nullable: true,
  })
  spouses?: SpouseCreateNestedManyWithoutPeopleInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ssnNumber?: string | null;

  @ApiProperty({
    required: false,
    type: () => TravelDetailCreateNestedManyWithoutPeopleInput,
  })
  @ValidateNested()
  @Type(() => TravelDetailCreateNestedManyWithoutPeopleInput)
  @IsOptional()
  @Field(() => TravelDetailCreateNestedManyWithoutPeopleInput, {
    nullable: true,
  })
  travelDetails?: TravelDetailCreateNestedManyWithoutPeopleInput;
}

export { PersonCreateInput as PersonCreateInput };
