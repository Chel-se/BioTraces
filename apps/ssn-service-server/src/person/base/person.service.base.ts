/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Person as PrismaPerson,
  BankDetail as PrismaBankDetail,
  BirthDetails as PrismaBirthDetails,
  Child as PrismaChild,
  EducationRecord as PrismaEducationRecord,
  FamilyMember as PrismaFamilyMember,
  HealthRecord as PrismaHealthRecord,
  MarriageCertificate as PrismaMarriageCertificate,
  Otp as PrismaOtp,
  PassportDetail as PrismaPassportDetail,
  Spouse as PrismaSpouse,
  TravelDetail as PrismaTravelDetail,
} from "@prisma/client";

export class PersonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PersonCountArgs, "select">): Promise<number> {
    return this.prisma.person.count(args);
  }

  async people(args: Prisma.PersonFindManyArgs): Promise<PrismaPerson[]> {
    return this.prisma.person.findMany(args);
  }
  async person(
    args: Prisma.PersonFindUniqueArgs
  ): Promise<PrismaPerson | null> {
    return this.prisma.person.findUnique(args);
  }
  async createPerson(args: Prisma.PersonCreateArgs): Promise<PrismaPerson> {
    return this.prisma.person.create(args);
  }
  async updatePerson(args: Prisma.PersonUpdateArgs): Promise<PrismaPerson> {
    return this.prisma.person.update(args);
  }
  async deletePerson(args: Prisma.PersonDeleteArgs): Promise<PrismaPerson> {
    return this.prisma.person.delete(args);
  }

  async findBankDetails(
    parentId: string,
    args: Prisma.BankDetailFindManyArgs
  ): Promise<PrismaBankDetail[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bankDetails(args);
  }

  async findBirthDetailsItems(
    parentId: string,
    args: Prisma.BirthDetailsFindManyArgs
  ): Promise<PrismaBirthDetails[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .birthDetailsItems(args);
  }

  async findChildren(
    parentId: string,
    args: Prisma.ChildFindManyArgs
  ): Promise<PrismaChild[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .children(args);
  }

  async findEducationRecords(
    parentId: string,
    args: Prisma.EducationRecordFindManyArgs
  ): Promise<PrismaEducationRecord[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .educationRecords(args);
  }

  async findFamilyMembers(
    parentId: string,
    args: Prisma.FamilyMemberFindManyArgs
  ): Promise<PrismaFamilyMember[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .familyMembers(args);
  }

  async findHealthRecords(
    parentId: string,
    args: Prisma.HealthRecordFindManyArgs
  ): Promise<PrismaHealthRecord[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .healthRecords(args);
  }

  async findMarriageCertificates(
    parentId: string,
    args: Prisma.MarriageCertificateFindManyArgs
  ): Promise<PrismaMarriageCertificate[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .marriageCertificates(args);
  }

  async findOtps(
    parentId: string,
    args: Prisma.OtpFindManyArgs
  ): Promise<PrismaOtp[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .otps(args);
  }

  async findPassportDetails(
    parentId: string,
    args: Prisma.PassportDetailFindManyArgs
  ): Promise<PrismaPassportDetail[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .passportDetails(args);
  }

  async findSpouses(
    parentId: string,
    args: Prisma.SpouseFindManyArgs
  ): Promise<PrismaSpouse[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .spouses(args);
  }

  async findTravelDetails(
    parentId: string,
    args: Prisma.TravelDetailFindManyArgs
  ): Promise<PrismaTravelDetail[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .travelDetails(args);
  }
}
