/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PersonService } from "../person.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PersonCreateInput } from "./PersonCreateInput";
import { Person } from "./Person";
import { PersonFindManyArgs } from "./PersonFindManyArgs";
import { PersonWhereUniqueInput } from "./PersonWhereUniqueInput";
import { PersonUpdateInput } from "./PersonUpdateInput";
import { BankDetailFindManyArgs } from "../../bankDetail/base/BankDetailFindManyArgs";
import { BankDetail } from "../../bankDetail/base/BankDetail";
import { BankDetailWhereUniqueInput } from "../../bankDetail/base/BankDetailWhereUniqueInput";
import { BirthDetailsFindManyArgs } from "../../birthDetails/base/BirthDetailsFindManyArgs";
import { BirthDetails } from "../../birthDetails/base/BirthDetails";
import { BirthDetailsWhereUniqueInput } from "../../birthDetails/base/BirthDetailsWhereUniqueInput";
import { ChildFindManyArgs } from "../../child/base/ChildFindManyArgs";
import { Child } from "../../child/base/Child";
import { ChildWhereUniqueInput } from "../../child/base/ChildWhereUniqueInput";
import { EducationRecordFindManyArgs } from "../../educationRecord/base/EducationRecordFindManyArgs";
import { EducationRecord } from "../../educationRecord/base/EducationRecord";
import { EducationRecordWhereUniqueInput } from "../../educationRecord/base/EducationRecordWhereUniqueInput";
import { FamilyMemberFindManyArgs } from "../../familyMember/base/FamilyMemberFindManyArgs";
import { FamilyMember } from "../../familyMember/base/FamilyMember";
import { FamilyMemberWhereUniqueInput } from "../../familyMember/base/FamilyMemberWhereUniqueInput";
import { HealthRecordFindManyArgs } from "../../healthRecord/base/HealthRecordFindManyArgs";
import { HealthRecord } from "../../healthRecord/base/HealthRecord";
import { HealthRecordWhereUniqueInput } from "../../healthRecord/base/HealthRecordWhereUniqueInput";
import { MarriageCertificateFindManyArgs } from "../../marriageCertificate/base/MarriageCertificateFindManyArgs";
import { MarriageCertificate } from "../../marriageCertificate/base/MarriageCertificate";
import { MarriageCertificateWhereUniqueInput } from "../../marriageCertificate/base/MarriageCertificateWhereUniqueInput";
import { OtpFindManyArgs } from "../../otp/base/OtpFindManyArgs";
import { Otp } from "../../otp/base/Otp";
import { OtpWhereUniqueInput } from "../../otp/base/OtpWhereUniqueInput";
import { PassportDetailFindManyArgs } from "../../passportDetail/base/PassportDetailFindManyArgs";
import { PassportDetail } from "../../passportDetail/base/PassportDetail";
import { PassportDetailWhereUniqueInput } from "../../passportDetail/base/PassportDetailWhereUniqueInput";
import { SpouseFindManyArgs } from "../../spouse/base/SpouseFindManyArgs";
import { Spouse } from "../../spouse/base/Spouse";
import { SpouseWhereUniqueInput } from "../../spouse/base/SpouseWhereUniqueInput";
import { TravelDetailFindManyArgs } from "../../travelDetail/base/TravelDetailFindManyArgs";
import { TravelDetail } from "../../travelDetail/base/TravelDetail";
import { TravelDetailWhereUniqueInput } from "../../travelDetail/base/TravelDetailWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PersonControllerBase {
  constructor(
    protected readonly service: PersonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Person })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPerson(@common.Body() data: PersonCreateInput): Promise<Person> {
    return await this.service.createPerson({
      data: data,
      select: {
        birthdate: true,
        createdAt: true,
        dateOfBirth: true,
        faceScan: true,
        familyTree: true,
        fingerPrintScan: true,
        firstName: true,
        id: true,
        lastName: true,
        ssnNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Person] })
  @ApiNestedQuery(PersonFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async people(@common.Req() request: Request): Promise<Person[]> {
    const args = plainToClass(PersonFindManyArgs, request.query);
    return this.service.people({
      ...args,
      select: {
        birthdate: true,
        createdAt: true,
        dateOfBirth: true,
        faceScan: true,
        familyTree: true,
        fingerPrintScan: true,
        firstName: true,
        id: true,
        lastName: true,
        ssnNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Person })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async person(
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Person | null> {
    const result = await this.service.person({
      where: params,
      select: {
        birthdate: true,
        createdAt: true,
        dateOfBirth: true,
        faceScan: true,
        familyTree: true,
        fingerPrintScan: true,
        firstName: true,
        id: true,
        lastName: true,
        ssnNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Person })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePerson(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() data: PersonUpdateInput
  ): Promise<Person | null> {
    try {
      return await this.service.updatePerson({
        where: params,
        data: data,
        select: {
          birthdate: true,
          createdAt: true,
          dateOfBirth: true,
          faceScan: true,
          familyTree: true,
          fingerPrintScan: true,
          firstName: true,
          id: true,
          lastName: true,
          ssnNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Person })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePerson(
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Person | null> {
    try {
      return await this.service.deletePerson({
        where: params,
        select: {
          birthdate: true,
          createdAt: true,
          dateOfBirth: true,
          faceScan: true,
          familyTree: true,
          fingerPrintScan: true,
          firstName: true,
          id: true,
          lastName: true,
          ssnNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bankDetails")
  @ApiNestedQuery(BankDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BankDetail",
    action: "read",
    possession: "any",
  })
  async findBankDetails(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<BankDetail[]> {
    const query = plainToClass(BankDetailFindManyArgs, request.query);
    const results = await this.service.findBankDetails(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bankDetails")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectBankDetails(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: BankDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankDetails: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bankDetails")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateBankDetails(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: BankDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankDetails: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bankDetails")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectBankDetails(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: BankDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankDetails: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/birthDetailsItems")
  @ApiNestedQuery(BirthDetailsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BirthDetails",
    action: "read",
    possession: "any",
  })
  async findBirthDetailsItems(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<BirthDetails[]> {
    const query = plainToClass(BirthDetailsFindManyArgs, request.query);
    const results = await this.service.findBirthDetailsItems(params.id, {
      ...query,
      select: {
        createdAt: true,

        healthRecord: {
          select: {
            id: true,
          },
        },

        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/birthDetailsItems")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectBirthDetailsItems(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: BirthDetailsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      birthDetailsItems: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/birthDetailsItems")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateBirthDetailsItems(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: BirthDetailsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      birthDetailsItems: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/birthDetailsItems")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectBirthDetailsItems(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: BirthDetailsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      birthDetailsItems: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/children")
  @ApiNestedQuery(ChildFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Child",
    action: "read",
    possession: "any",
  })
  async findChildren(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Child[]> {
    const query = plainToClass(ChildFindManyArgs, request.query);
    const results = await this.service.findChildren(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        parentSpouse: true,

        person: {
          select: {
            id: true,
          },
        },

        spouse: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/children")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectChildren(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: ChildWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      children: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/children")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateChildren(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: ChildWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      children: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/children")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectChildren(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: ChildWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      children: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/educationRecords")
  @ApiNestedQuery(EducationRecordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EducationRecord",
    action: "read",
    possession: "any",
  })
  async findEducationRecords(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<EducationRecord[]> {
    const query = plainToClass(EducationRecordFindManyArgs, request.query);
    const results = await this.service.findEducationRecords(params.id, {
      ...query,
      select: {
        birthDetail: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/educationRecords")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectEducationRecords(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: EducationRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationRecords: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/educationRecords")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateEducationRecords(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: EducationRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationRecords: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/educationRecords")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectEducationRecords(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: EducationRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educationRecords: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/familyMembers")
  @ApiNestedQuery(FamilyMemberFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  async findFamilyMembers(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<FamilyMember[]> {
    const query = plainToClass(FamilyMemberFindManyArgs, request.query);
    const results = await this.service.findFamilyMembers(params.id, {
      ...query,
      select: {
        child: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        generationLevel: true,
        id: true,
        parentId: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/familyMembers")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectFamilyMembers(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembers: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/familyMembers")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateFamilyMembers(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembers: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/familyMembers")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectFamilyMembers(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: FamilyMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      familyMembers: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/healthRecords")
  @ApiNestedQuery(HealthRecordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "read",
    possession: "any",
  })
  async findHealthRecords(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<HealthRecord[]> {
    const query = plainToClass(HealthRecordFindManyArgs, request.query);
    const results = await this.service.findHealthRecords(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/healthRecords")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectHealthRecords(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: HealthRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      healthRecords: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/healthRecords")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateHealthRecords(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: HealthRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      healthRecords: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/healthRecords")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectHealthRecords(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: HealthRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      healthRecords: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/marriageCertificates")
  @ApiNestedQuery(MarriageCertificateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MarriageCertificate",
    action: "read",
    possession: "any",
  })
  async findMarriageCertificates(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<MarriageCertificate[]> {
    const query = plainToClass(MarriageCertificateFindManyArgs, request.query);
    const results = await this.service.findMarriageCertificates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        spouse: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/marriageCertificates")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectMarriageCertificates(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: MarriageCertificateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      marriageCertificates: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/marriageCertificates")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateMarriageCertificates(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: MarriageCertificateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      marriageCertificates: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/marriageCertificates")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectMarriageCertificates(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: MarriageCertificateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      marriageCertificates: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/otps")
  @ApiNestedQuery(OtpFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Otp",
    action: "read",
    possession: "any",
  })
  async findOtps(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Otp[]> {
    const query = plainToClass(OtpFindManyArgs, request.query);
    const results = await this.service.findOtps(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        expiration: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/otps")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectOtps(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: OtpWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otps: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/otps")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateOtps(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: OtpWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otps: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/otps")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectOtps(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: OtpWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otps: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/passportDetails")
  @ApiNestedQuery(PassportDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "read",
    possession: "any",
  })
  async findPassportDetails(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<PassportDetail[]> {
    const query = plainToClass(PassportDetailFindManyArgs, request.query);
    const results = await this.service.findPassportDetails(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/passportDetails")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectPassportDetails(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: PassportDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passportDetails: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/passportDetails")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updatePassportDetails(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: PassportDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passportDetails: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/passportDetails")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectPassportDetails(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: PassportDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passportDetails: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/spouses")
  @ApiNestedQuery(SpouseFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Spouse",
    action: "read",
    possession: "any",
  })
  async findSpouses(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Spouse[]> {
    const query = plainToClass(SpouseFindManyArgs, request.query);
    const results = await this.service.findSpouses(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/spouses")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectSpouses(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: SpouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      spouses: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/spouses")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateSpouses(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: SpouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      spouses: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/spouses")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectSpouses(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: SpouseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      spouses: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/travelDetails")
  @ApiNestedQuery(TravelDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "read",
    possession: "any",
  })
  async findTravelDetails(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<TravelDetail[]> {
    const query = plainToClass(TravelDetailFindManyArgs, request.query);
    const results = await this.service.findTravelDetails(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        passportDetail: {
          select: {
            id: true,
          },
        },

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/travelDetails")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectTravelDetails(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: TravelDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelDetails: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/travelDetails")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateTravelDetails(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: TravelDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelDetails: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/travelDetails")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectTravelDetails(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: TravelDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      travelDetails: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }
}
