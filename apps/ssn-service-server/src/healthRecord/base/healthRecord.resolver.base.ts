/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HealthRecord } from "./HealthRecord";
import { HealthRecordCountArgs } from "./HealthRecordCountArgs";
import { HealthRecordFindManyArgs } from "./HealthRecordFindManyArgs";
import { HealthRecordFindUniqueArgs } from "./HealthRecordFindUniqueArgs";
import { CreateHealthRecordArgs } from "./CreateHealthRecordArgs";
import { UpdateHealthRecordArgs } from "./UpdateHealthRecordArgs";
import { DeleteHealthRecordArgs } from "./DeleteHealthRecordArgs";
import { BirthDetailsFindManyArgs } from "../../birthDetails/base/BirthDetailsFindManyArgs";
import { BirthDetails } from "../../birthDetails/base/BirthDetails";
import { Person } from "../../person/base/Person";
import { HealthRecordService } from "../healthRecord.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HealthRecord)
export class HealthRecordResolverBase {
  constructor(
    protected readonly service: HealthRecordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "read",
    possession: "any",
  })
  async _healthRecordsMeta(
    @graphql.Args() args: HealthRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HealthRecord])
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "read",
    possession: "any",
  })
  async healthRecords(
    @graphql.Args() args: HealthRecordFindManyArgs
  ): Promise<HealthRecord[]> {
    return this.service.healthRecords(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HealthRecord, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "read",
    possession: "own",
  })
  async healthRecord(
    @graphql.Args() args: HealthRecordFindUniqueArgs
  ): Promise<HealthRecord | null> {
    const result = await this.service.healthRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HealthRecord)
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "create",
    possession: "any",
  })
  async createHealthRecord(
    @graphql.Args() args: CreateHealthRecordArgs
  ): Promise<HealthRecord> {
    return await this.service.createHealthRecord({
      ...args,
      data: {
        ...args.data,

        person: args.data.person
          ? {
              connect: args.data.person,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HealthRecord)
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "update",
    possession: "any",
  })
  async updateHealthRecord(
    @graphql.Args() args: UpdateHealthRecordArgs
  ): Promise<HealthRecord | null> {
    try {
      return await this.service.updateHealthRecord({
        ...args,
        data: {
          ...args.data,

          person: args.data.person
            ? {
                connect: args.data.person,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HealthRecord)
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "delete",
    possession: "any",
  })
  async deleteHealthRecord(
    @graphql.Args() args: DeleteHealthRecordArgs
  ): Promise<HealthRecord | null> {
    try {
      return await this.service.deleteHealthRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BirthDetails], { name: "birthDetailsItems" })
  @nestAccessControl.UseRoles({
    resource: "BirthDetails",
    action: "read",
    possession: "any",
  })
  async findBirthDetailsItems(
    @graphql.Parent() parent: HealthRecord,
    @graphql.Args() args: BirthDetailsFindManyArgs
  ): Promise<BirthDetails[]> {
    const results = await this.service.findBirthDetailsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  async getPerson(
    @graphql.Parent() parent: HealthRecord
  ): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
