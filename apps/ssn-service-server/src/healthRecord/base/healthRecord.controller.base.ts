/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { HealthRecordService } from "../healthRecord.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { HealthRecordCreateInput } from "./HealthRecordCreateInput";
import { HealthRecord } from "./HealthRecord";
import { HealthRecordFindManyArgs } from "./HealthRecordFindManyArgs";
import { HealthRecordWhereUniqueInput } from "./HealthRecordWhereUniqueInput";
import { HealthRecordUpdateInput } from "./HealthRecordUpdateInput";
import { BirthDetailsFindManyArgs } from "../../birthDetails/base/BirthDetailsFindManyArgs";
import { BirthDetails } from "../../birthDetails/base/BirthDetails";
import { BirthDetailsWhereUniqueInput } from "../../birthDetails/base/BirthDetailsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class HealthRecordControllerBase {
  constructor(
    protected readonly service: HealthRecordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HealthRecord })
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createHealthRecord(
    @common.Body() data: HealthRecordCreateInput
  ): Promise<HealthRecord> {
    return await this.service.createHealthRecord({
      data: {
        ...data,

        person: data.person
          ? {
              connect: data.person,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [HealthRecord] })
  @ApiNestedQuery(HealthRecordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async healthRecords(@common.Req() request: Request): Promise<HealthRecord[]> {
    const args = plainToClass(HealthRecordFindManyArgs, request.query);
    return this.service.healthRecords({
      ...args,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HealthRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async healthRecord(
    @common.Param() params: HealthRecordWhereUniqueInput
  ): Promise<HealthRecord | null> {
    const result = await this.service.healthRecord({
      where: params,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HealthRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateHealthRecord(
    @common.Param() params: HealthRecordWhereUniqueInput,
    @common.Body() data: HealthRecordUpdateInput
  ): Promise<HealthRecord | null> {
    try {
      return await this.service.updateHealthRecord({
        where: params,
        data: {
          ...data,

          person: data.person
            ? {
                connect: data.person,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          person: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HealthRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteHealthRecord(
    @common.Param() params: HealthRecordWhereUniqueInput
  ): Promise<HealthRecord | null> {
    try {
      return await this.service.deleteHealthRecord({
        where: params,
        select: {
          createdAt: true,
          id: true,

          person: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/birthDetailsItems")
  @ApiNestedQuery(BirthDetailsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BirthDetails",
    action: "read",
    possession: "any",
  })
  async findBirthDetailsItems(
    @common.Req() request: Request,
    @common.Param() params: HealthRecordWhereUniqueInput
  ): Promise<BirthDetails[]> {
    const query = plainToClass(BirthDetailsFindManyArgs, request.query);
    const results = await this.service.findBirthDetailsItems(params.id, {
      ...query,
      select: {
        createdAt: true,

        healthRecord: {
          select: {
            id: true,
          },
        },

        id: true,

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/birthDetailsItems")
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "update",
    possession: "any",
  })
  async connectBirthDetailsItems(
    @common.Param() params: HealthRecordWhereUniqueInput,
    @common.Body() body: BirthDetailsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      birthDetailsItems: {
        connect: body,
      },
    };
    await this.service.updateHealthRecord({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/birthDetailsItems")
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "update",
    possession: "any",
  })
  async updateBirthDetailsItems(
    @common.Param() params: HealthRecordWhereUniqueInput,
    @common.Body() body: BirthDetailsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      birthDetailsItems: {
        set: body,
      },
    };
    await this.service.updateHealthRecord({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/birthDetailsItems")
  @nestAccessControl.UseRoles({
    resource: "HealthRecord",
    action: "update",
    possession: "any",
  })
  async disconnectBirthDetailsItems(
    @common.Param() params: HealthRecordWhereUniqueInput,
    @common.Body() body: BirthDetailsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      birthDetailsItems: {
        disconnect: body,
      },
    };
    await this.service.updateHealthRecord({
      where: params,
      data,
      select: { id: true },
    });
  }
}
