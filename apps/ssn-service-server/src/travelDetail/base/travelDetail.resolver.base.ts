/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TravelDetail } from "./TravelDetail";
import { TravelDetailCountArgs } from "./TravelDetailCountArgs";
import { TravelDetailFindManyArgs } from "./TravelDetailFindManyArgs";
import { TravelDetailFindUniqueArgs } from "./TravelDetailFindUniqueArgs";
import { CreateTravelDetailArgs } from "./CreateTravelDetailArgs";
import { UpdateTravelDetailArgs } from "./UpdateTravelDetailArgs";
import { DeleteTravelDetailArgs } from "./DeleteTravelDetailArgs";
import { PassportDetail } from "../../passportDetail/base/PassportDetail";
import { Person } from "../../person/base/Person";
import { TravelDetailService } from "../travelDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TravelDetail)
export class TravelDetailResolverBase {
  constructor(
    protected readonly service: TravelDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "read",
    possession: "any",
  })
  async _travelDetailsMeta(
    @graphql.Args() args: TravelDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TravelDetail])
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "read",
    possession: "any",
  })
  async travelDetails(
    @graphql.Args() args: TravelDetailFindManyArgs
  ): Promise<TravelDetail[]> {
    return this.service.travelDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TravelDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "read",
    possession: "own",
  })
  async travelDetail(
    @graphql.Args() args: TravelDetailFindUniqueArgs
  ): Promise<TravelDetail | null> {
    const result = await this.service.travelDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TravelDetail)
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "create",
    possession: "any",
  })
  async createTravelDetail(
    @graphql.Args() args: CreateTravelDetailArgs
  ): Promise<TravelDetail> {
    return await this.service.createTravelDetail({
      ...args,
      data: {
        ...args.data,

        passportDetail: args.data.passportDetail
          ? {
              connect: args.data.passportDetail,
            }
          : undefined,

        person: args.data.person
          ? {
              connect: args.data.person,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TravelDetail)
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "update",
    possession: "any",
  })
  async updateTravelDetail(
    @graphql.Args() args: UpdateTravelDetailArgs
  ): Promise<TravelDetail | null> {
    try {
      return await this.service.updateTravelDetail({
        ...args,
        data: {
          ...args.data,

          passportDetail: args.data.passportDetail
            ? {
                connect: args.data.passportDetail,
              }
            : undefined,

          person: args.data.person
            ? {
                connect: args.data.person,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TravelDetail)
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "delete",
    possession: "any",
  })
  async deleteTravelDetail(
    @graphql.Args() args: DeleteTravelDetailArgs
  ): Promise<TravelDetail | null> {
    try {
      return await this.service.deleteTravelDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PassportDetail, {
    nullable: true,
    name: "passportDetail",
  })
  @nestAccessControl.UseRoles({
    resource: "PassportDetail",
    action: "read",
    possession: "any",
  })
  async getPassportDetail(
    @graphql.Parent() parent: TravelDetail
  ): Promise<PassportDetail | null> {
    const result = await this.service.getPassportDetail(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  async getPerson(
    @graphql.Parent() parent: TravelDetail
  ): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
