/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TravelDetailService } from "../travelDetail.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TravelDetailCreateInput } from "./TravelDetailCreateInput";
import { TravelDetail } from "./TravelDetail";
import { TravelDetailFindManyArgs } from "./TravelDetailFindManyArgs";
import { TravelDetailWhereUniqueInput } from "./TravelDetailWhereUniqueInput";
import { TravelDetailUpdateInput } from "./TravelDetailUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TravelDetailControllerBase {
  constructor(
    protected readonly service: TravelDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TravelDetail })
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTravelDetail(
    @common.Body() data: TravelDetailCreateInput
  ): Promise<TravelDetail> {
    return await this.service.createTravelDetail({
      data: {
        ...data,

        passportDetail: data.passportDetail
          ? {
              connect: data.passportDetail,
            }
          : undefined,

        person: data.person
          ? {
              connect: data.person,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        passportDetail: {
          select: {
            id: true,
          },
        },

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TravelDetail] })
  @ApiNestedQuery(TravelDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async travelDetails(@common.Req() request: Request): Promise<TravelDetail[]> {
    const args = plainToClass(TravelDetailFindManyArgs, request.query);
    return this.service.travelDetails({
      ...args,
      select: {
        createdAt: true,
        id: true,

        passportDetail: {
          select: {
            id: true,
          },
        },

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TravelDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async travelDetail(
    @common.Param() params: TravelDetailWhereUniqueInput
  ): Promise<TravelDetail | null> {
    const result = await this.service.travelDetail({
      where: params,
      select: {
        createdAt: true,
        id: true,

        passportDetail: {
          select: {
            id: true,
          },
        },

        person: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TravelDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTravelDetail(
    @common.Param() params: TravelDetailWhereUniqueInput,
    @common.Body() data: TravelDetailUpdateInput
  ): Promise<TravelDetail | null> {
    try {
      return await this.service.updateTravelDetail({
        where: params,
        data: {
          ...data,

          passportDetail: data.passportDetail
            ? {
                connect: data.passportDetail,
              }
            : undefined,

          person: data.person
            ? {
                connect: data.person,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          passportDetail: {
            select: {
              id: true,
            },
          },

          person: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TravelDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TravelDetail",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTravelDetail(
    @common.Param() params: TravelDetailWhereUniqueInput
  ): Promise<TravelDetail | null> {
    try {
      return await this.service.deleteTravelDetail({
        where: params,
        select: {
          createdAt: true,
          id: true,

          passportDetail: {
            select: {
              id: true,
            },
          },

          person: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
